// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: cofee_shop.proto

package coffeeshop_protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoffeeShopNimar_GetMenu_FullMethodName        = "/coffee_shop.CoffeeShopNimar/GetMenu"
	CoffeeShopNimar_PlaceOrder_FullMethodName     = "/coffee_shop.CoffeeShopNimar/PlaceOrder"
	CoffeeShopNimar_GetOrderStatus_FullMethodName = "/coffee_shop.CoffeeShopNimar/GetOrderStatus"
)

// CoffeeShopNimarClient is the client API for CoffeeShopNimar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoffeeShopNimarClient interface {
	GetMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error)
	PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Receipt, error)
	GetOrderStatus(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*OrderStatus, error)
}

type coffeeShopNimarClient struct {
	cc grpc.ClientConnInterface
}

func NewCoffeeShopNimarClient(cc grpc.ClientConnInterface) CoffeeShopNimarClient {
	return &coffeeShopNimarClient{cc}
}

func (c *coffeeShopNimarClient) GetMenu(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MenuResponse)
	err := c.cc.Invoke(ctx, CoffeeShopNimar_GetMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coffeeShopNimarClient) PlaceOrder(ctx context.Context, in *Order, opts ...grpc.CallOption) (*Receipt, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Receipt)
	err := c.cc.Invoke(ctx, CoffeeShopNimar_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coffeeShopNimarClient) GetOrderStatus(ctx context.Context, in *Receipt, opts ...grpc.CallOption) (*OrderStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderStatus)
	err := c.cc.Invoke(ctx, CoffeeShopNimar_GetOrderStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoffeeShopNimarServer is the server API for CoffeeShopNimar service.
// All implementations must embed UnimplementedCoffeeShopNimarServer
// for forward compatibility.
type CoffeeShopNimarServer interface {
	GetMenu(context.Context, *MenuRequest) (*MenuResponse, error)
	PlaceOrder(context.Context, *Order) (*Receipt, error)
	GetOrderStatus(context.Context, *Receipt) (*OrderStatus, error)
	mustEmbedUnimplementedCoffeeShopNimarServer()
}

// UnimplementedCoffeeShopNimarServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoffeeShopNimarServer struct{}

func (UnimplementedCoffeeShopNimarServer) GetMenu(context.Context, *MenuRequest) (*MenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedCoffeeShopNimarServer) PlaceOrder(context.Context, *Order) (*Receipt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedCoffeeShopNimarServer) GetOrderStatus(context.Context, *Receipt) (*OrderStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrderStatus not implemented")
}
func (UnimplementedCoffeeShopNimarServer) mustEmbedUnimplementedCoffeeShopNimarServer() {}
func (UnimplementedCoffeeShopNimarServer) testEmbeddedByValue()                         {}

// UnsafeCoffeeShopNimarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoffeeShopNimarServer will
// result in compilation errors.
type UnsafeCoffeeShopNimarServer interface {
	mustEmbedUnimplementedCoffeeShopNimarServer()
}

func RegisterCoffeeShopNimarServer(s grpc.ServiceRegistrar, srv CoffeeShopNimarServer) {
	// If the following call pancis, it indicates UnimplementedCoffeeShopNimarServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoffeeShopNimar_ServiceDesc, srv)
}

func _CoffeeShopNimar_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeShopNimarServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoffeeShopNimar_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeShopNimarServer).GetMenu(ctx, req.(*MenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoffeeShopNimar_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Order)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeShopNimarServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoffeeShopNimar_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeShopNimarServer).PlaceOrder(ctx, req.(*Order))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoffeeShopNimar_GetOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Receipt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoffeeShopNimarServer).GetOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoffeeShopNimar_GetOrderStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoffeeShopNimarServer).GetOrderStatus(ctx, req.(*Receipt))
	}
	return interceptor(ctx, in, info, handler)
}

// CoffeeShopNimar_ServiceDesc is the grpc.ServiceDesc for CoffeeShopNimar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoffeeShopNimar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "coffee_shop.CoffeeShopNimar",
	HandlerType: (*CoffeeShopNimarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenu",
			Handler:    _CoffeeShopNimar_GetMenu_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _CoffeeShopNimar_PlaceOrder_Handler,
		},
		{
			MethodName: "GetOrderStatus",
			Handler:    _CoffeeShopNimar_GetOrderStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cofee_shop.proto",
}
